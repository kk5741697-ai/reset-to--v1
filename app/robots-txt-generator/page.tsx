"use client"

import { useState } from "react"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { Bot, Copy, Download, Plus, Trash2, Globe } from "lucide-react"
import { toast } from "@/hooks/use-toast"

interface RobotRule {
  id: string
  userAgent: string
  directive: "Allow" | "Disallow"
  path: string
}

export default function RobotsTxtGeneratorPage() {
  const [siteUrl, setSiteUrl] = useState("")
  const [rules, setRules] = useState<RobotRule[]>([])
  const [sitemapUrls, setSitemapUrls] = useState<string[]>([""])
  const [crawlDelay, setCrawlDelay] = useState("")
  const [generatedRobots, setGeneratedRobots] = useState("")

  const commonUserAgents = [
    "*",
    "Googlebot",
    "Bingbot", 
    "Slurp",
    "DuckDuckBot",
    "Baiduspider",
    "YandexBot",
    "facebookexternalhit",
    "Twitterbot",
    "LinkedInBot"
  ]

  const addRule = () => {
    const newRule: RobotRule = {
      id: Date.now().toString(),
      userAgent: "*",
      directive: "Disallow",
      path: ""
    }
    setRules(prev => [...prev, newRule])
  }

  const updateRule = (id: string, field: keyof RobotRule, value: string) => {
    setRules(prev => prev.map(rule => 
      rule.id === id ? { ...rule, [field]: value } : rule
    ))
  }

  const removeRule = (id: string) => {
    setRules(prev => prev.filter(rule => rule.id !== id))
  }

  const addSitemapUrl = () => {
    setSitemapUrls(prev => [...prev, ""])
  }

  const updateSitemapUrl = (index: number, value: string) => {
    setSitemapUrls(prev => prev.map((url, i) => i === index ? value : url))
  }

  const removeSitemapUrl = (index: number) => {
    setSitemapUrls(prev => prev.filter((_, i) => i !== index))
  }

  const generateRobotsTxt = () => {
    let robotsContent = "# Robots.txt generated by PixoraTools\n"
    robotsContent += `# Generated on: ${new Date().toISOString()}\n\n`

    // Group rules by user agent
    const rulesByAgent = new Map<string, RobotRule[]>()
    rules.forEach(rule => {
      if (!rulesByAgent.has(rule.userAgent)) {
        rulesByAgent.set(rule.userAgent, [])
      }
      rulesByAgent.get(rule.userAgent)!.push(rule)
    })

    // Generate rules
    rulesByAgent.forEach((agentRules, userAgent) => {
      robotsContent += `User-agent: ${userAgent}\n`
      
      agentRules.forEach(rule => {
        if (rule.path.trim()) {
          robotsContent += `${rule.directive}: ${rule.path}\n`
        }
      })
      
      if (crawlDelay && userAgent === "*") {
        robotsContent += `Crawl-delay: ${crawlDelay}\n`
      }
      
      robotsContent += "\n"
    })

    // Add sitemaps
    const validSitemaps = sitemapUrls.filter(url => url.trim())
    if (validSitemaps.length > 0) {
      robotsContent += "# Sitemaps\n"
      validSitemaps.forEach(url => {
        const fullUrl = url.startsWith('http') ? url : `${siteUrl}${url}`
        robotsContent += `Sitemap: ${fullUrl}\n`
      })
    }

    setGeneratedRobots(robotsContent)
  }

  const copyRobots = () => {
    navigator.clipboard.writeText(generatedRobots)
    toast({
      title: "Copied to clipboard",
      description: "Robots.txt content copied"
    })
  }

  const downloadRobots = () => {
    const blob = new Blob([generatedRobots], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.href = url
    link.download = "robots.txt"
    link.click()
    URL.revokeObjectURL(url)

    toast({
      title: "Download started",
      description: "Robots.txt file downloaded"
    })
  }

  const loadTemplate = (template: string) => {
    switch (template) {
      case "allow-all":
        setRules([
          { id: "1", userAgent: "*", directive: "Allow", path: "/" }
        ])
        break
      case "block-all":
        setRules([
          { id: "1", userAgent: "*", directive: "Disallow", path: "/" }
        ])
        break
      case "common":
        setRules([
          { id: "1", userAgent: "*", directive: "Allow", path: "/" },
          { id: "2", userAgent: "*", directive: "Disallow", path: "/admin/" },
          { id: "3", userAgent: "*", directive: "Disallow", path: "/private/" },
          { id: "4", userAgent: "*", directive: "Disallow", path: "/temp/" }
        ])
        break
    }
  }

  return (
    <div className="min-h-screen bg-background">
      <Header />

      <div className="container mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <div className="inline-flex items-center space-x-2 mb-4">
            <Bot className="h-8 w-8 text-accent" />
            <h1 className="text-3xl font-heading font-bold text-foreground">Robots.txt Generator</h1>
          </div>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            Create and validate robots.txt files to control search engine crawling and indexing of your website.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto">
          {/* Configuration */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Website Configuration</CardTitle>
                <CardDescription>Basic website information</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="site-url">Website URL</Label>
                  <Input
                    id="site-url"
                    value={siteUrl}
                    onChange={(e) => setSiteUrl(e.target.value)}
                    placeholder="https://example.com"
                    type="url"
                  />
                </div>

                <div>
                  <Label htmlFor="crawl-delay">Crawl Delay (seconds)</Label>
                  <Input
                    id="crawl-delay"
                    value={crawlDelay}
                    onChange={(e) => setCrawlDelay(e.target.value)}
                    placeholder="1"
                    type="number"
                    min="0"
                  />
                  <p className="text-xs text-muted-foreground mt-1">
                    Optional delay between requests (applies to all crawlers)
                  </p>
                </div>

                <div className="flex space-x-2">
                  <Button onClick={addRule} className="flex-1">
                    <Plus className="h-4 w-4 mr-2" />
                    Add Rule
                  </Button>
                  <Select onValueChange={loadTemplate}>
                    <SelectTrigger className="w-32">
                      <SelectValue placeholder="Template" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="allow-all">Allow All</SelectItem>
                      <SelectItem value="block-all">Block All</SelectItem>
                      <SelectItem value="common">Common Rules</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>

            {/* Rules */}
            {rules.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Crawler Rules ({rules.length})</CardTitle>
                  <CardDescription>Configure access rules for search engine crawlers</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4 max-h-96 overflow-y-auto">
                    {rules.map((rule) => (
                      <div key={rule.id} className="border rounded-lg p-4 space-y-3">
                        <div className="flex items-center justify-between">
                          <Badge variant="outline">Rule {rule.id}</Badge>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => removeRule(rule.id)}
                          >
                            <Trash2 className="h-3 w-3" />
                          </Button>
                        </div>

                        <div className="grid grid-cols-3 gap-3">
                          <div>
                            <Label className="text-xs">User Agent</Label>
                            <Select
                              value={rule.userAgent}
                              onValueChange={(value) => updateRule(rule.id, "userAgent", value)}
                            >
                              <SelectTrigger className="text-sm">
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                {commonUserAgents.map((agent) => (
                                  <SelectItem key={agent} value={agent}>
                                    {agent}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <Label className="text-xs">Directive</Label>
                            <Select
                              value={rule.directive}
                              onValueChange={(value) => updateRule(rule.id, "directive", value as "Allow" | "Disallow")}
                            >
                              <SelectTrigger className="text-sm">
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="Allow">Allow</SelectItem>
                                <SelectItem value="Disallow">Disallow</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <Label className="text-xs">Path</Label>
                            <Input
                              value={rule.path}
                              onChange={(e) => updateRule(rule.id, "path", e.target.value)}
                              placeholder="/path/"
                              className="text-sm"
                            />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Sitemaps */}
            <Card>
              <CardHeader>
                <CardTitle>Sitemap URLs</CardTitle>
                <CardDescription>Add sitemap locations for crawlers</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {sitemapUrls.map((url, index) => (
                  <div key={index} className="flex space-x-2">
                    <Input
                      value={url}
                      onChange={(e) => updateSitemapUrl(index, e.target.value)}
                      placeholder="/sitemap.xml or full URL"
                      className="flex-1"
                    />
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => removeSitemapUrl(index)}
                      disabled={sitemapUrls.length === 1}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
                <Button onClick={addSitemapUrl} variant="outline" size="sm">
                  <Plus className="h-4 w-4 mr-2" />
                  Add Sitemap
                </Button>
              </CardContent>
            </Card>
          </div>

          {/* Generated Robots.txt */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Generated Robots.txt</CardTitle>
                <CardDescription>Your robots.txt file content</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button onClick={generateRobotsTxt} className="w-full" size="lg">
                  <Bot className="h-4 w-4 mr-2" />
                  Generate Robots.txt
                </Button>

                {generatedRobots && (
                  <>
                    <Textarea
                      value={generatedRobots}
                      readOnly
                      className="min-h-[400px] font-mono text-sm"
                    />

                    <div className="flex space-x-2">
                      <Button onClick={copyRobots} variant="outline">
                        <Copy className="h-4 w-4 mr-2" />
                        Copy Content
                      </Button>
                      <Button onClick={downloadRobots} variant="outline">
                        <Download className="h-4 w-4 mr-2" />
                        Download File
                      </Button>
                    </div>

                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                      <h4 className="font-medium text-blue-900 mb-2">Installation Instructions:</h4>
                      <ol className="text-sm text-blue-800 space-y-1">
                        <li>1. Save the content as "robots.txt"</li>
                        <li>2. Upload to your website root directory</li>
                        <li>3. Verify at: {siteUrl || "https://yoursite.com"}/robots.txt</li>
                        <li>4. Test with Google Search Console</li>
                      </ol>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>

            {/* Common Patterns */}
            <Card>
              <CardHeader>
                <CardTitle>Common Robots.txt Patterns</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium mb-2">Block Admin Areas</h4>
                    <div className="bg-gray-100 p-3 rounded font-mono text-sm">
                      User-agent: *<br/>
                      Disallow: /admin/<br/>
                      Disallow: /wp-admin/<br/>
                      Disallow: /private/
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Allow Specific Bots</h4>
                    <div className="bg-gray-100 p-3 rounded font-mono text-sm">
                      User-agent: Googlebot<br/>
                      Allow: /<br/>
                      <br/>
                      User-agent: *<br/>
                      Disallow: /
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Block File Types</h4>
                    <div className="bg-gray-100 p-3 rounded font-mono text-sm">
                      User-agent: *<br/>
                      Disallow: /*.pdf$<br/>
                      Disallow: /*.doc$<br/>
                      Disallow: /*.zip$
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      <Footer />
    </div>
  )
}